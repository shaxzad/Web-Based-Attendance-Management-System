// This file is auto-generated by @hey-api/openapi-ts

export type AttendanceCreate = {
    check_in_time: string;
    check_out_time?: (string | null);
    device_id?: (string | null);
    zkteco_device_id?: (string | null);
    attendance_type?: string;
    status?: string;
    employee_id: string;
};

export type AttendancePublic = {
    check_in_time: string;
    check_out_time?: (string | null);
    device_id?: (string | null);
    zkteco_device_id?: (string | null);
    attendance_type?: string;
    status?: string;
    id: string;
    employee_id: string;
    created_at: string;
    updated_at: string;
};

export type AttendancesPublic = {
    data: Array<AttendancePublic>;
    count: number;
};

export type AttendanceUpdate = {
    check_out_time?: (string | null);
    status?: (string | null);
};

export type Body_login_login_access_token = {
    grant_type?: (string | null);
    username: string;
    password: string;
    scope?: string;
    client_id?: (string | null);
    client_secret?: (string | null);
};

export type CalendarEvent = {
    id: string;
    title: string;
    description: (string | null);
    date: string;
    holiday_type: string;
    color: string;
    is_recurring: boolean;
    recurrence_pattern: (string | null);
};

export type CalendarView = {
    year: number;
    month: number;
    events: Array<CalendarEvent>;
    holidays: Array<CalendarEvent>;
};

export type DepartmentCreate = {
    name: string;
    description?: (string | null);
    is_active?: boolean;
};

export type DepartmentPublic = {
    name: string;
    description?: (string | null);
    is_active?: boolean;
    id: string;
    created_at: string;
    updated_at: string;
};

export type DepartmentUpdate = {
    name?: (string | null);
    description?: (string | null);
    is_active?: (boolean | null);
};

export type EmployeeCreate = {
    employee_id: string;
    cnic: string;
    first_name: string;
    last_name: string;
    phone: string;
    address?: (string | null);
    date_of_birth?: (string | null);
    hire_date: string;
    salary?: (number | null);
    is_active?: boolean;
    emergency_contact_name?: (string | null);
    emergency_contact_phone?: (string | null);
    department_id: string;
    user_id?: (string | null);
};

export type EmployeePublic = {
    employee_id: string;
    cnic: string;
    first_name: string;
    last_name: string;
    phone: string;
    address?: (string | null);
    date_of_birth?: (string | null);
    hire_date: string;
    salary?: (number | null);
    is_active?: boolean;
    emergency_contact_name?: (string | null);
    emergency_contact_phone?: (string | null);
    id: string;
    department_id: string;
    user_id: (string | null);
    created_at: string;
    updated_at: string;
};

export type EmployeesPublic = {
    data: Array<EmployeePublic>;
    count: number;
};

export type EmployeeUpdate = {
    employee_id?: (string | null);
    cnic?: (string | null);
    first_name?: (string | null);
    last_name?: (string | null);
    phone?: (string | null);
    address?: (string | null);
    date_of_birth?: (string | null);
    hire_date?: (string | null);
    salary?: (number | null);
    is_active?: (boolean | null);
    emergency_contact_name?: (string | null);
    emergency_contact_phone?: (string | null);
    department_id?: (string | null);
};

export type HolidayCreate = {
    title: string;
    description?: (string | null);
    holiday_date: string;
    holiday_type?: string;
    is_recurring?: boolean;
    recurrence_pattern?: (string | null);
    color?: string;
    is_active?: boolean;
};

export type HolidayPublic = {
    title: string;
    description?: (string | null);
    holiday_date: string;
    holiday_type?: string;
    is_recurring?: boolean;
    recurrence_pattern?: (string | null);
    color?: string;
    is_active?: boolean;
    id: string;
    created_at: string;
    updated_at: string;
    created_by: string;
};

export type HolidaysPublic = {
    data: Array<HolidayPublic>;
    count: number;
};

export type HolidayUpdate = {
    title?: (string | null);
    description?: (string | null);
    holiday_date?: (string | null);
    holiday_type?: (string | null);
    is_recurring?: (boolean | null);
    recurrence_pattern?: (string | null);
    color?: (string | null);
    is_active?: (boolean | null);
};

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

export type ItemCreate = {
    title: string;
    description?: (string | null);
};

export type ItemPublic = {
    title: string;
    description?: (string | null);
    id: string;
    owner_id: string;
};

export type ItemsPublic = {
    data: Array<ItemPublic>;
    count: number;
};

export type ItemUpdate = {
    title?: (string | null);
    description?: (string | null);
};

export type Message = {
    message: string;
};

export type NewPassword = {
    token: string;
    new_password: string;
};

export type PrivateUserCreate = {
    email: string;
    password: string;
    full_name: string;
    is_verified?: boolean;
};

export type Token = {
    access_token: string;
    token_type?: string;
};

export type UpdatePassword = {
    current_password: string;
    new_password: string;
};

export type UserCreate = {
    email: string;
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    password: string;
};

export type UserPublic = {
    email: string;
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    id: string;
};

export type UserRegister = {
    email: string;
    password: string;
    full_name?: (string | null);
};

export type UsersPublic = {
    data: Array<UserPublic>;
    count: number;
};

export type UserUpdate = {
    email?: (string | null);
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    password?: (string | null);
};

export type UserUpdateMe = {
    full_name?: (string | null);
    email?: (string | null);
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type ZKTecoDeviceCreate = {
    device_name: string;
    device_ip: string;
    device_port?: number;
    device_id: string;
    location?: (string | null);
    description?: (string | null);
    is_active?: boolean;
    /**
     * Sync interval in minutes
     */
    sync_interval?: number;
    last_sync?: (string | null);
    device_status?: string;
};

export type ZKTecoDevicePublic = {
    device_name: string;
    device_ip: string;
    device_port?: number;
    device_id: string;
    location?: (string | null);
    description?: (string | null);
    is_active?: boolean;
    /**
     * Sync interval in minutes
     */
    sync_interval?: number;
    last_sync?: (string | null);
    device_status?: string;
    id: string;
    created_at: string;
    updated_at: string;
};

export type ZKTecoDevicesPublic = {
    data: Array<ZKTecoDevicePublic>;
    count: number;
};

export type ZKTecoDeviceUpdate = {
    device_name?: (string | null);
    device_ip?: (string | null);
    device_port?: (number | null);
    location?: (string | null);
    description?: (string | null);
    is_active?: (boolean | null);
    /**
     * Sync interval in minutes
     */
    sync_interval?: (number | null);
};

export type AttendanceReadAttendancesData = {
    /**
     * Filter by device ID
     */
    deviceId?: (string | null);
    /**
     * Filter by employee ID
     */
    employeeId?: (string | null);
    /**
     * Filter by end date (YYYY-MM-DD)
     */
    endDate?: (string | null);
    limit?: number;
    skip?: number;
    /**
     * Filter by start date (YYYY-MM-DD)
     */
    startDate?: (string | null);
    /**
     * Filter by status
     */
    status?: (string | null);
};

export type AttendanceReadAttendancesResponse = (AttendancesPublic);

export type AttendanceCreateAttendanceData = {
    requestBody: AttendanceCreate;
};

export type AttendanceCreateAttendanceResponse = (AttendancePublic);

export type AttendanceReadAttendanceData = {
    attendanceId: string;
};

export type AttendanceReadAttendanceResponse = (AttendancePublic);

export type AttendanceUpdateAttendanceData = {
    attendanceId: string;
    requestBody: AttendanceUpdate;
};

export type AttendanceUpdateAttendanceResponse = (AttendancePublic);

export type AttendanceDeleteAttendanceData = {
    attendanceId: string;
};

export type AttendanceDeleteAttendanceResponse = (unknown);

export type AttendanceReadEmployeeAttendancesData = {
    employeeId: string;
    limit?: number;
    skip?: number;
};

export type AttendanceReadEmployeeAttendancesResponse = (AttendancesPublic);

export type AttendanceReadZktecoDevicesData = {
    /**
     * Filter by active status
     */
    isActive?: (boolean | null);
    limit?: number;
    skip?: number;
};

export type AttendanceReadZktecoDevicesResponse = (ZKTecoDevicesPublic);

export type AttendanceCreateZktecoDeviceData = {
    requestBody: ZKTecoDeviceCreate;
};

export type AttendanceCreateZktecoDeviceResponse = (ZKTecoDevicePublic);

export type AttendanceReadZktecoDeviceData = {
    deviceId: string;
};

export type AttendanceReadZktecoDeviceResponse = (ZKTecoDevicePublic);

export type AttendanceUpdateZktecoDeviceData = {
    deviceId: string;
    requestBody: ZKTecoDeviceUpdate;
};

export type AttendanceUpdateZktecoDeviceResponse = (ZKTecoDevicePublic);

export type AttendanceDeleteZktecoDeviceData = {
    deviceId: string;
};

export type AttendanceDeleteZktecoDeviceResponse = (unknown);

export type AttendanceConnectDeviceData = {
    deviceId: string;
};

export type AttendanceConnectDeviceResponse = (unknown);

export type AttendanceSyncDeviceAttendanceData = {
    deviceId: string;
};

export type AttendanceSyncDeviceAttendanceResponse = (unknown);

export type AttendanceSyncAllDevicesResponse = (unknown);

export type AttendanceGetDeviceInfoData = {
    deviceId: string;
};

export type AttendanceGetDeviceInfoResponse = (unknown);

export type AttendanceRestartDeviceData = {
    deviceId: string;
};

export type AttendanceRestartDeviceResponse = (unknown);

export type AttendanceClearDeviceAttendanceData = {
    deviceId: string;
};

export type AttendanceClearDeviceAttendanceResponse = (unknown);

export type AttendanceGetDailyAttendanceReportData = {
    /**
     * Date in YYYY-MM-DD format
     */
    date: string;
    /**
     * Filter by department ID
     */
    departmentId?: (string | null);
};

export type AttendanceGetDailyAttendanceReportResponse = (unknown);

export type AttendanceGetMonthlyAttendanceReportData = {
    /**
     * Filter by department ID
     */
    departmentId?: (string | null);
    /**
     * Month (1-12)
     */
    month: number;
    /**
     * Year
     */
    year: number;
};

export type AttendanceGetMonthlyAttendanceReportResponse = (unknown);

export type DepartmentsReadDepartmentsData = {
    limit?: number;
    skip?: number;
};

export type DepartmentsReadDepartmentsResponse = (Array<DepartmentPublic>);

export type DepartmentsCreateDepartmentData = {
    requestBody: DepartmentCreate;
};

export type DepartmentsCreateDepartmentResponse = (DepartmentPublic);

export type DepartmentsReadDepartmentData = {
    departmentId: string;
};

export type DepartmentsReadDepartmentResponse = (DepartmentPublic);

export type DepartmentsUpdateDepartmentData = {
    departmentId: string;
    requestBody: DepartmentUpdate;
};

export type DepartmentsUpdateDepartmentResponse = (DepartmentPublic);

export type DepartmentsDeleteDepartmentData = {
    departmentId: string;
};

export type DepartmentsDeleteDepartmentResponse = (unknown);

export type EmployeesReadEmployeesData = {
    /**
     * Filter by department ID
     */
    departmentId?: (string | null);
    limit?: number;
    skip?: number;
};

export type EmployeesReadEmployeesResponse = (EmployeesPublic);

export type EmployeesCreateEmployeeData = {
    requestBody: EmployeeCreate;
};

export type EmployeesCreateEmployeeResponse = (EmployeePublic);

export type EmployeesReadEmployeeData = {
    employeeId: string;
};

export type EmployeesReadEmployeeResponse = (EmployeePublic);

export type EmployeesUpdateEmployeeData = {
    employeeId: string;
    requestBody: EmployeeUpdate;
};

export type EmployeesUpdateEmployeeResponse = (EmployeePublic);

export type EmployeesDeleteEmployeeData = {
    employeeId: string;
};

export type EmployeesDeleteEmployeeResponse = (unknown);

export type EmployeesReadEmployeeByEmployeeIdData = {
    employeeId: string;
};

export type EmployeesReadEmployeeByEmployeeIdResponse = (EmployeePublic);

export type EmployeesReadEmployeeByCnicData = {
    cnic: string;
};

export type EmployeesReadEmployeeByCnicResponse = (EmployeePublic);

export type HolidaysReadHolidaysData = {
    /**
     * Filter by holiday type
     */
    holidayType?: (string | null);
    limit?: number;
    /**
     * Filter by month
     */
    month?: (number | null);
    skip?: number;
    /**
     * Filter by year
     */
    year?: (number | null);
};

export type HolidaysReadHolidaysResponse = (HolidaysPublic);

export type HolidaysCreateHolidayData = {
    requestBody: HolidayCreate;
};

export type HolidaysCreateHolidayResponse = (HolidayPublic);

export type HolidaysReadHolidayData = {
    holidayId: string;
};

export type HolidaysReadHolidayResponse = (HolidayPublic);

export type HolidaysUpdateHolidayData = {
    holidayId: string;
    requestBody: HolidayUpdate;
};

export type HolidaysUpdateHolidayResponse = (HolidayPublic);

export type HolidaysDeleteHolidayData = {
    holidayId: string;
};

export type HolidaysDeleteHolidayResponse = (unknown);

export type HolidaysGetCalendarViewData = {
    month: number;
    year: number;
};

export type HolidaysGetCalendarViewResponse = (CalendarView);

export type HolidaysGetCalendarRangeData = {
    /**
     * End date (YYYY-MM-DD)
     */
    endDate: string;
    /**
     * Start date (YYYY-MM-DD)
     */
    startDate: string;
};

export type HolidaysGetCalendarRangeResponse = (unknown);

export type ItemsReadItemsData = {
    limit?: number;
    skip?: number;
};

export type ItemsReadItemsResponse = (ItemsPublic);

export type ItemsCreateItemData = {
    requestBody: ItemCreate;
};

export type ItemsCreateItemResponse = (ItemPublic);

export type ItemsReadItemData = {
    id: string;
};

export type ItemsReadItemResponse = (ItemPublic);

export type ItemsUpdateItemData = {
    id: string;
    requestBody: ItemUpdate;
};

export type ItemsUpdateItemResponse = (ItemPublic);

export type ItemsDeleteItemData = {
    id: string;
};

export type ItemsDeleteItemResponse = (Message);

export type LoginLoginAccessTokenData = {
    formData: Body_login_login_access_token;
};

export type LoginLoginAccessTokenResponse = (Token);

export type LoginTestTokenResponse = (UserPublic);

export type LoginRecoverPasswordData = {
    email: string;
};

export type LoginRecoverPasswordResponse = (Message);

export type LoginResetPasswordData = {
    requestBody: NewPassword;
};

export type LoginResetPasswordResponse = (Message);

export type LoginRecoverPasswordHtmlContentData = {
    email: string;
};

export type LoginRecoverPasswordHtmlContentResponse = (string);

export type PrivateCreateUserData = {
    requestBody: PrivateUserCreate;
};

export type PrivateCreateUserResponse = (UserPublic);

export type UsersReadUsersData = {
    limit?: number;
    skip?: number;
};

export type UsersReadUsersResponse = (UsersPublic);

export type UsersCreateUserData = {
    requestBody: UserCreate;
};

export type UsersCreateUserResponse = (UserPublic);

export type UsersReadUserMeResponse = (UserPublic);

export type UsersDeleteUserMeResponse = (Message);

export type UsersUpdateUserMeData = {
    requestBody: UserUpdateMe;
};

export type UsersUpdateUserMeResponse = (UserPublic);

export type UsersUpdatePasswordMeData = {
    requestBody: UpdatePassword;
};

export type UsersUpdatePasswordMeResponse = (Message);

export type UsersRegisterUserData = {
    requestBody: UserRegister;
};

export type UsersRegisterUserResponse = (UserPublic);

export type UsersReadUserByIdData = {
    userId: string;
};

export type UsersReadUserByIdResponse = (UserPublic);

export type UsersUpdateUserData = {
    requestBody: UserUpdate;
    userId: string;
};

export type UsersUpdateUserResponse = (UserPublic);

export type UsersDeleteUserData = {
    userId: string;
};

export type UsersDeleteUserResponse = (Message);

export type UtilsTestEmailData = {
    emailTo: string;
};

export type UtilsTestEmailResponse = (Message);

export type UtilsHealthCheckResponse = (boolean);

export type UtilsGetDashboardStatsResponse = ({
    [key: string]: unknown;
});